{"version":3,"sources":["js/color-switch.js","js/timer.js","index.js"],"names":["body","document","querySelector","btnStart","btnStop","INTERVAL","intervalId","colorSwitch","setInterval","addClass","setAttribute","style","backgroundColor","getRandomHexColor","Math","floor","random","toString","colorStop","clearInterval","removeAttribute","addEventListener","inputEl","btnTimeStart","spanDays","spanHours","spanMinutes","spanSeconds","startTime","getDate","Date","parse","value","now","alert","blockDate","tomorrow","setDate","toISOString","split","startTimer","timer","start","currentTime","deltaTime","days","hours","minutes","seconds","convertMs","updateClockFace","stop","ms","hour","pad","minute","second","String","padStart","textContent"],"mappings":";;;AAAA,MAAMA,EAAOC,SAASC,cAAc,QAC9BC,EAAWF,SAASC,cAAc,sBAClCE,EAAUH,SAASC,cAAc,qBACjCG,EAAW,IACjB,IAAIC,EAAa,KAKjB,SAASC,IACLD,EAAaE,YAAYC,EAAUJ,GACnCF,EAASO,aAAa,YAAY,GAGtC,SAASD,IACLT,EAAKW,MAAMC,gBAAkBC,IAGjC,SAASA,IACC,UAAGC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,MAG3D,SAASC,IACLC,cAAcb,GACdH,EAASiB,gBAAgB,YAlB7BjB,EAASkB,iBAAiB,QAASd,GACnCH,EAAQiB,iBAAiB,QAASH;;ACNlC,MAAMI,EAAUrB,SAASC,cAAc,kBACjCqB,EAAetB,SAASC,cAAc,0BACtCsB,EAAWvB,SAASC,cAAc,kBAClCuB,EAAYxB,SAASC,cAAc,mBACnCwB,EAAczB,SAASC,cAAc,qBACrCyB,EAAc1B,SAASC,cAAc,qBAE3C,IAAI0B,EAAY,KAMhB,SAASC,KACLD,EAAYE,KAAKC,MAAM,IAAID,KAAKR,EAAQU,SAExBF,KAAKG,MACjBC,MAAM,uCAIVC,IACAZ,EAAaH,gBAAgB,aAGjC,SAASe,IACLC,SAAW,IAAIN,MAAK,IAAIA,MAAOO,SAAQ,IAAIP,MAAOD,UAAY,IAAIS,cAAcC,MAAM,KAAK,GAC3FjB,EAAQZ,aAAa,MAAO0B,UAOhC,SAASI,IACLC,EAAMC,QA3BVnB,EAAab,aAAa,YAAY,GAItCY,EAAQD,iBAAiB,SAAUQ,GAqBnCN,EAAaF,iBAAiB,QAASmB,GAQvC,MAAMC,EAAQ,CACVnC,WAAY,KAGZoC,QAKSpC,KAAAA,WAAaE,YAAY,KACpBmC,MAAAA,EAAcb,KAAKG,MACnBW,EAAYhB,EAAYe,GACxB,KAAEE,EAAF,MAAQC,EAAR,QAAeC,EAAf,QAAwBC,GAAYC,EAAUL,GACpDM,EAAgB,CAAEL,KAAAA,EAAMC,MAAAA,EAAOC,QAAAA,EAASC,QAAAA,KACzC,MAGPG,OACIhC,cAAc,KAAKb,cAO3B,SAAS2C,EAAUG,GAWV,MAAA,CAAEP,KALI/B,KAAKC,MAAMqC,EAFZC,OAOGP,MAJDQ,EAAIxC,KAAKC,MAAOqC,EAHlBC,MADCE,OAQSR,QAHNO,EAAIxC,KAAKC,MAAQqC,EAJrBC,MADCE,KADEC,MASgBR,QAFfM,EAAIxC,KAAKC,MAASqC,EALtBC,MADCE,KADEC,IADA,OAajB,SAASF,EAAItB,GACFyB,OAAAA,OAAOzB,GAAO0B,SAAS,EAAG,KAMrC,SAASR,GAAgB,KAAEL,EAAF,MAAQC,EAAR,QAAeC,EAAf,QAAwBC,IAC7CxB,EAASmC,YAAcd,EACvBpB,EAAUkC,YAAcb,EACxBpB,EAAYiC,YAAcZ,EAC1BpB,EAAYgC,YAAcX;;ACxF9B,aAJA,QAAA,oBAEA,QAAA,qBACA,QAAA,wBACA,QAAA","file":"src.bf063b82.js","sourceRoot":"../src","sourcesContent":["const body = document.querySelector('body');\nconst btnStart = document.querySelector('button[data-start]')\nconst btnStop = document.querySelector('button[data-stop]')\nconst INTERVAL = 1000;\nlet intervalId = null;\n\nbtnStart.addEventListener('click', colorSwitch);\nbtnStop.addEventListener('click', colorStop);\n\nfunction colorSwitch() {\n    intervalId = setInterval(addClass, INTERVAL);\n    btnStart.setAttribute('disabled', true);\n}\n\nfunction addClass() {\n    body.style.backgroundColor = getRandomHexColor();\n}\n\nfunction getRandomHexColor() {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n}\n\nfunction colorStop() {\n    clearInterval(intervalId);\n    btnStart.removeAttribute('disabled');\n};","// -- ЭЛЕМЕНТЫ\nconst inputEl = document.querySelector('#date-selector');\nconst btnTimeStart = document.querySelector('button[data-timestart]');\nconst spanDays = document.querySelector('span[data-days');\nconst spanHours = document.querySelector('span[data-hours');\nconst spanMinutes = document.querySelector('span[data-minutes');\nconst spanSeconds = document.querySelector('span[data-seconds');\n\nlet startTime = null;\nbtnTimeStart.setAttribute('disabled', true);\n\n\n// -- ДАТА ВВЕДЕННАЯ ПОЛЬЗОВАТЕЛЕМ\ninputEl.addEventListener('change', getDate);\nfunction getDate() {\n    startTime = Date.parse(new Date(inputEl.value));\n        \n    if (startTime < Date.now()) {\n        alert(\"Please choose a date in the future\");\n        return;\n    }\n\n    blockDate();\n    btnTimeStart.removeAttribute('disabled');\n};\n\nfunction blockDate() {\n    tomorrow = new Date(new Date().setDate(new Date().getDate() + 1)).toISOString().split('T')[0];  \n    inputEl.setAttribute('min', tomorrow);\n}\n\n\n\n// -- КЛИК ПОКНОПКЕ ДЛЯ ЗАПУСКА ТАЙМЕРА\nbtnTimeStart.addEventListener('click', startTimer);\nfunction startTimer() {\n    timer.start();\n};\n\n\n\n// -- СТАРТ И СТОП ДЛЯ ТАЙМЕРА\nconst timer = {\n    intervalId: null,\n    // isActive: false,\n\n    start() {\n        // if (this.isActive) {\n        //     return;\n        // }\n        // this.isActive = true;\n        this.intervalId = setInterval(() => {\n            const currentTime = Date.now();\n            const deltaTime = startTime - currentTime;\n            const { days, hours, minutes, seconds } = convertMs(deltaTime);\n            updateClockFace({ days, hours, minutes, seconds });\n        }, 1000);\n    },\n    \n    stop() {\n        clearInterval(this.intervalId);\n    }\n};\n\n\n\n// -- ПРЕОБРАЗОВАНИЕ МИЛЛИСЕКУНД В ДНИ, ЧАСЫ, МИНУТЫ И СЕКУНДЫ\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = pad(Math.floor((ms % day) / hour));\n  const minutes = pad(Math.floor(((ms % day) % hour) / minute));\n  const seconds = pad(Math.floor((((ms % day) % hour) % minute) / second));\n\n  return { days, hours, minutes, seconds };\n};\n\nfunction pad(value) {\n    return String(value).padStart(2, '0');\n};\n\n\n\n// -- ДОБАВЛЕНИЕ ЗНАЧЕНИЯ ВРЕМЕНИ В ИНТЕРФЕЙС\nfunction updateClockFace({ days, hours, minutes, seconds }) {\n    spanDays.textContent = days;\n    spanHours.textContent = hours;\n    spanMinutes.textContent = minutes;\n    spanSeconds.textContent = seconds;\n}","import './sass/main.scss';\n\nimport './js/color-switch';\nimport './js/promisification';\nimport './js/timer';\n\n"]}